{{- if and .Values.openshiftPipelines.enabled .Values.test.enabled }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Release.Name }}-pipelines
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-pipeline
  namespace: {{ .Release.Name }}-pipelines
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-pipeline-role
  namespace: {{ .Release.Name }}-pipelines
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
rules:
  - apiGroups: ["tekton.dev"]
    resources: ["tasks", "taskruns"]
    verbs: ["get", "list", "watch", "create", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-pipeline-rolebinding
  namespace: {{ .Release.Name }}-pipelines
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-pipeline
    namespace: {{ .Release.Name }}-pipelines
roleRef:
  kind: Role
  name: {{ .Release.Name }}-pipeline-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: tekton-test
  namespace: {{ .Release.Name }}-pipelines
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "2"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
spec:
  backoffLimit: 5
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-pipeline
      restartPolicy: Never
      containers:
        - name: tekton-test
          image: "{{ .Values.test.image.registry }}/{{ .Values.test.image.repository }}:{{ .Values.test.image.tag }}"
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              set +e
              echo "Starting Tekton test..."
              
              # Wait for Tekton API to be available
              echo "Waiting for Tekton API to be ready..."
              for i in {1..60}; do
                echo "Checking Tekton API... (attempt $i/60)"
                if kubectl api-resources | grep -q "tasks.*tekton.dev"; then
                  echo "Tekton API is available!"
                  break
                fi
                if [ $i -eq 60 ]; then
                  echo "Timed out waiting for Tekton API"
                  exit 1
                fi
                sleep 5
              done
              
              # Create Task
              echo "Creating Tekton Task..."
              cat <<EOF | kubectl apply -f -
              apiVersion: tekton.dev/v1beta1
              kind: Task
              metadata:
                name: hello-world
                namespace: {{ .Release.Name }}-pipelines
              spec:
                steps:
                  - name: echo
                    securityContext:
                      allowPrivilegeEscalation: false
                      readOnlyRootFilesystem: true
                      capabilities:
                        drop: ["ALL"]
                      runAsNonRoot: true
                    resources:
                      requests:
                        cpu: 10m
                        memory: 20Mi
                      limits:
                        cpu: 10m
                        memory: 20Mi
                    image: "{{ .Values.test.image.registry }}/{{ .Values.test.image.repository }}:{{ .Values.test.image.tag }}"
                    script: |
                      #!/bin/sh
                      echo "Hello from Tekton"
              EOF
              
              # Wait for Task to be ready
              echo "Waiting for Task to be ready..."
              for i in {1..30}; do
                if kubectl get task hello-world -n {{ .Release.Name }}-pipelines > /dev/null 2>&1; then
                  echo "Task is ready!"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "Timed out waiting for Task"
                  exit 1
                fi
                sleep 2
              done
              
              # Create TaskRun
              echo "Creating TaskRun..."
              cat <<EOF | kubectl apply -f -
              apiVersion: tekton.dev/v1beta1
              kind: TaskRun
              metadata:
                name: hello-world-run
                namespace: {{ .Release.Name }}-pipelines
              spec:
                taskRef:
                  name: hello-world
                serviceAccountName: {{ .Release.Name }}-pipeline
              EOF
              
              # Wait for TaskRun to complete
              echo "Waiting for TaskRun to complete..."
              for i in {1..60}; do
                status=$(kubectl get taskrun hello-world-run -n {{ .Release.Name }}-pipelines -o jsonpath='{.status.conditions[?(@.type=="Succeeded")].reason}' 2>/dev/null)
                echo "TaskRun status: $status"
                if [ "$status" = "Succeeded" ]; then
                  echo "TaskRun succeeded!"
                  # Cleanup
                  kubectl delete taskrun hello-world-run -n {{ .Release.Name }}-pipelines 2>/dev/null || true
                  kubectl delete task hello-world -n {{ .Release.Name }}-pipelines 2>/dev/null || true
                  exit 0
                fi
                if [ "$status" = "Failed" ]; then
                  echo "TaskRun failed!"
                  kubectl describe taskrun hello-world-run -n {{ .Release.Name }}-pipelines
                  exit 1
                fi
                sleep 5
              done
              
              echo "Timeout waiting for TaskRun to complete"
              exit 1


{{- end }}
